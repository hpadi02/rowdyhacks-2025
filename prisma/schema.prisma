// GoLoanMe Database Schema
// SQLite version for local development

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Core User Model
model User {
  id        String   @id @default(cuid())
  auth0Sub  String   @unique
  email     String   @unique
  handle    String   @unique
  bio       String?
  avatarUrl String?
  locale    String   @default("en")
  interests String   @default("[]") // JSON string for SQLite
  verified  Boolean  @default(false)
  rating    Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts     Post[]
  pledges   Pledge[]
  circles   Circle[]
  mentions  Mention[] @relation("MentionAuthor")
  targetMentions Mention[] @relation("MentionTarget")
  comments  Comment[]
  reports   Report[]
  auditLogs AuditLog[]
  termsTemplates TermsTemplate[]
  sponsorProfile SponsorProfile?

  @@map("users")
}

// Sponsor Profile
model SponsorProfile {
  userId    String  @id
  verified  Boolean @default(false)
  rating    Float?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sponsor_profiles")
}

// Terms Template
model TermsTemplate {
  id         String   @id @default(cuid())
  userId     String
  title      String
  inputsJson String   @map("inputs_json") // JSON string
  llmVersion String? @map("llm_version")
  html       String
  pdfUrl     String?  @map("pdf_url")
  createdAt  DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pledges Pledge[]

  @@map("terms_templates")
}

// Post Model
model Post {
  id              String   @id @default(cuid())
  ownerId         String
  title           String
  description     String
  category        String
  images          String   @default("[]") // JSON string
  links           String   @default("[]") // JSON string
  acceptContracts Boolean @default(false)
  status          String   @default("open")
  goal            Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  owner    User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  pledges  Pledge[]
  comments Comment[]
  mentions Mention[]

  @@map("posts")
}

// Pledge Model
model Pledge {
  id        String   @id @default(cuid())
  postId    String
  pledgerId String
  type      String   // 'donation' or 'contract'
  amountGLM Int
  termsId   String?
  note      String?
  createdAt DateTime @default(now())

  post  Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [pledgerId], references: [id], onDelete: Cascade)
  terms TermsTemplate? @relation(fields: [termsId], references: [id])

  @@map("pledges")
}

// Account Model
model Account {
  id        String @id @default(cuid())
  ownerType String // 'user' or 'post'
  ownerId   String
  balanceGLM Int    @default(0)

  ledgerEntries LedgerEntry[]

  @@map("accounts")
}

// Ledger Entry Model
model LedgerEntry {
  id        String   @id @default(cuid())
  accountId String
  type      String   // 'credit' or 'debit'
  amountGLM Int
  refType   String   // 'pledge', 'transfer', 'repayment'
  refId     String?
  createdAt DateTime @default(now())

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("ledger_entries")
}

// Circle Model
model Circle {
  id          String   @id @default(cuid())
  ownerId     String
  name        String
  description String?
  members     String   @default("[]") // JSON string
  createdAt   DateTime @default(now())

  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("circles")
}

// Mention Model
model Mention {
  id          String   @id @default(cuid())
  postId      String
  authorId    String
  targetUserId String
  createdAt   DateTime @default(now())

  post        Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  author      User @relation("MentionAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  targetUser  User @relation("MentionTarget", fields: [targetUserId], references: [id], onDelete: Cascade)

  @@map("mentions")
}

// Comment Model
model Comment {
  id        String   @id @default(cuid())
  postId    String
  authorId  String
  text      String
  createdAt DateTime @default(now())

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("comments")
}

// Report Model
model Report {
  id         String   @id @default(cuid())
  reporterId String
  targetType String   // 'post', 'comment', 'user'
  targetId   String
  reason     String
  status     String   @default("pending")
  createdAt  DateTime @default(now())

  reporter User @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@map("reports")
}

// Audit Log Model
model AuditLog {
  id       String   @id @default(cuid())
  actorId  String?
  action   String
  payload  String   @default("{}") // JSON string
  createdAt DateTime @default(now())

  actor User? @relation(fields: [actorId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}